/*
 * Please refer to the terms of the license agreement.
 *
 * (c) 2024 Feedzai, Rights Reserved.
 */
import React from "react";
import { useAutoId, generateFallbackId, generateUUIDFragment, initializeState } from "src/hooks";

function DemoComponent({ value, prefix }: { value?: string | null; prefix?: string }) {
  const firstId = useAutoId(value, prefix);
  const secondId = useAutoId();
  return (
    <div>
      <p id={firstId}>A paragraph</p>
      <span id={secondId}>An inline span element</span>
    </div>
  );
}

function FallbackDemo({
  value = "feedzai-fallback-id",
  prefix,
}: {
  value?: string;
  prefix?: string;
}) {
  const id = useAutoId(value, prefix);
  return <h1 id={id}>Feedzai</h1>;
}

describe("generateFallbackId", () => {
  it("generates a fallback ID", () => {
    const id = generateFallbackId();
    expect(id).to.exist;
    expect(typeof id).to.equal("string");
  });
});

describe("generateUUIDFragment", () => {
  it("generates a UUID fragment", () => {
    const id = generateUUIDFragment();
    expect(id).to.exist;
    expect(typeof id).to.equal("string");
    expect(id.length).to.equal(8);
  });

  it("generates a UUID fragment of a given length", () => {
    const id = generateUUIDFragment(16);
    expect(id).to.exist;
    expect(typeof id).to.equal("string");
    expect(id.length).to.equal(16);
  });
});

describe("initializeState", () => {
  it("generates a UUID fragment if no ID is provided", () => {
    // @ts-expect-error - This is a test for the fallback behavior
    const id = initializeState();
    expect(id).to.exist;
    expect(typeof id).to.equal("string");
  });

  it("generates a UUID fragment of a given length if no ID is provided", () => {
    const id = initializeState(undefined, { length: 16 });
    expect(id).to.exist;
    expect(typeof id).to.equal("string");
    expect(id.length).to.equal(16);
  });

  it("returns the provided ID if it is a string", () => {
    const id = initializeState("feedzai-id");
    expect(id).to.equal("feedzai-id");
  });
});

describe("useAutoId", () => {
  it("generates a prefixed fallback ID", () => {
    cy.mount(<DemoComponent prefix="fdz-prefix" />);

    console.log(process.env.NODE_ENV);

    cy.findByText("A paragraph")
      .invoke("attr", "id")
      .should("match", /^fdz-prefix--[a-z0-9]+$/);
  });

  context("React <18 (no useId support)", () => {
    beforeEach(() => {
      cy.stub(React, "useId").as("useIdStub").value(undefined);
    });

    it("generates unique IDs using fallback generator", () => {
      cy.mount(<DemoComponent />);

      cy.findByText("A paragraph")
        .invoke("attr", "id")
        .then((firstId) => {
          expect(firstId).to.exist;

          cy.findByText("An inline span element")
            .invoke("attr", "id")
            .should("exist")
            .and("not.equal", firstId);
        });
    });

    it("uses a static fallback ID if provided", () => {
      cy.mount(<FallbackDemo />);

      cy.findByText("Feedzai").should("have.id", "feedzai-fallback-id");
    });

    it("applies a prefix to the custom fallback ID", () => {
      cy.mount(<FallbackDemo value="423696e5" prefix="js-prefix" />);

      cy.findByText("Feedzai").should("have.id", "js-prefix--423696e5");
    });
  });

  context("React 18+ (with useId)", () => {
    it("uses React.useId to generate consistent IDs", () => {
      cy.mount(<DemoComponent />);

      cy.findByText("A paragraph")
        .invoke("attr", "id")
        .should("match", /^[a-z0-9]+$/);
      cy.findByText("An inline span element")
        .invoke("attr", "id")
        .should("match", /^[a-z0-9]+$/);
    });

    it("applies prefix to ID generated by React.useId", () => {
      cy.mount(<DemoComponent prefix="fdz-js-prefix" />);

      cy.findByText("A paragraph")
        .invoke("attr", "id")
        .should("match", /^fdz-js-prefix--[a-z0-9]+$/);
    });

    it("uses static fallback ID when explicitly provided", () => {
      cy.mount(<FallbackDemo />);

      cy.findByText("Feedzai").should("have.id", "feedzai-fallback-id");
    });

    it("applies prefix to provided fallback ID (ignoring useId)", () => {
      cy.mount(<FallbackDemo value="423696e5" prefix="fdz-js-prefix" />);

      cy.findByText("Feedzai").should("have.id", "fdz-js-prefix--423696e5");
    });
  });
});
