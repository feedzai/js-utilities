"use strict";(globalThis.webpackChunk_feedzai_js_utilities_docs=globalThis.webpackChunk_feedzai_js_utilities_docs||[]).push([[4844],{9092:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(4848),o=t(8453);const s={title:"useEnsuredForwardedRef"},a=void 0,i={id:"hooks/use-ensured-forwared-ref",title:"useEnsuredForwardedRef",description:"A React hook that safely handles forwarded refs to ensure consistent reference management.",source:"@site/docs/hooks/use-ensured-forwared-ref.mdx",sourceDirName:"hooks",slug:"/hooks/use-ensured-forwared-ref",permalink:"/js-utilities/docs/hooks/use-ensured-forwared-ref",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useEnsuredForwardedRef"},sidebar:"tutorialSidebar",previous:{title:"useEffectOnce",permalink:"/js-utilities/docs/hooks/use-effect-once"},next:{title:"useIntersection",permalink:"/js-utilities/docs/hooks/use-intersection"}},c={},d=[{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:3}];function u(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"A React hook that safely handles forwarded refs to ensure consistent reference management."}),"\n",(0,r.jsxs)(n.p,{children:["This hook addresses a specific challenge when working with forwarded refs in React components: When you need to access a ref both internally and externally in a component hierarchy.\nWhile ",(0,r.jsx)(n.code,{children:"React.forwardRef"})," allows passing refs to child components (typically to expose internal HTML elements to parent components), complications arise when you need to manipulate that reference within the child component's lifecycle hooks."]}),"\n",(0,r.jsx)(n.p,{children:"The main challenge is that you cannot guarantee that a parent component will always provide a ref, which can lead to undefined references. This hook ensures you always have a valid reference to work with, regardless of whether the parent component provides one."}),"\n",(0,r.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function useEnsuredForwardedRef<T>(forwardedRef: ForwardedRef<T>): MutableRefObject<T | null>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:" // Parent component\n const ParentComponent = () => {\n   const buttonRef = useRef<HTMLButtonElement>(null);\n   return <ChildComponent ref={buttonRef} />;\n };\n\n // Child component\n const ChildComponent = forwardRef<HTMLButtonElement>((props, ref) => {\n   const ensuredRef = useEnsuredForwardedRef(ref);\n\n   useEffect(() => {\n     // Safe to use ensuredRef.current here\n     // Even if parent didn't provide a ref\n     if (ensuredRef.current) {\n       ensuredRef.current.focus();\n     }\n   }, []);\n\n   return <button ref={ensuredRef}>Click me</button>;\n });\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);