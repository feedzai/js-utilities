"use strict";(globalThis.webpackChunk_feedzai_js_utilities_docs=globalThis.webpackChunk_feedzai_js_utilities_docs||[]).push([[6939],{5275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=t(4848),i=t(8453);const r={title:"useContainerQuery"},o=void 0,a={id:"hooks/use-container-query",title:"useContainerQuery",description:"Measure an HTML element width using the Resize Observer API.",source:"@site/docs/hooks/use-container-query.mdx",sourceDirName:"hooks",slug:"/hooks/use-container-query",permalink:"/js-utilities/docs/hooks/use-container-query",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"useContainerQuery"},sidebar:"tutorialSidebar",previous:{title:"useConstant",permalink:"/js-utilities/docs/hooks/use-constant"},next:{title:"useControlledState",permalink:"/js-utilities/docs/hooks/use-controlled-state"}},u={},c=[{value:"API",id:"api",level:2},{value:"Usage",id:"usage",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Measure an HTML element width using the Resize Observer API."}),"\n",(0,s.jsx)(n.p,{children:"It matches that value with the user's predefined breakpoint ranges and determines the containers size."}),"\n",(0,s.jsx)(n.p,{children:"The main purpose of this is to allow web developers to style DOM elements based on\nthe size of a containing element rather than the size of the browser viewport."}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function useContainerQuery<GenericType extends HTMLElement>({ breakpoints, ignoreDimensions, observedMeasurement, }: ContainerQueryProps): ContainerQueryResult<GenericType>;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'import { useContainerQuery } from \'@feedzai/js-utilities\';\n\nconst BREAKPOINTS = {\n "xs": [0, 960],\n "sm": [961, 1200],\n "md": [1201, 1440],\n "lg": [1441, 1920],\n "xl": [1921],\n};\n\nfunction App() {\n  const { ref, active, measurement: width } = useContainerQuery({ breakpoints });\n\n  return (\n     <div ref={ref}>\n         The current width is: {width}\n         This matches your breakpoint: {active}\n     </div>\n  );\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);